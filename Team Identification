{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[],"dockerImageVersionId":30886,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"!nvidia-smi","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-25T14:12:18.932260Z","iopub.execute_input":"2025-02-25T14:12:18.932465Z","iopub.status.idle":"2025-02-25T14:12:19.152234Z","shell.execute_reply.started":"2025-02-25T14:12:18.932445Z","shell.execute_reply":"2025-02-25T14:12:19.151356Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"%pip install ultralytics roboflow\n\nimport cv2\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport os\nimport random\nimport shutil\nimport subprocess\nimport torch\n\nfrom datetime import datetime\nfrom kaggle_secrets import UserSecretsClient\nfrom roboflow import Roboflow\nfrom tensorflow.keras.applications import ResNet50\nfrom tensorflow.keras.applications.resnet50 import preprocess_input\nfrom tensorflow.keras.models import Model\nfrom ultralytics import YOLO","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-25T14:12:19.153411Z","iopub.execute_input":"2025-02-25T14:12:19.153736Z","iopub.status.idle":"2025-02-25T14:12:40.402941Z","shell.execute_reply.started":"2025-02-25T14:12:19.153705Z","shell.execute_reply":"2025-02-25T14:12:40.402275Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"user_secrets = UserSecretsClient()\nGITHUB_TOKEN = user_secrets.get_secret(\"GITHUB_TOKEN\")\n\nGITHUB_USERNAME = 'jackd0uet'\nGITHUB_REPO = 'automated-offside'","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-25T14:12:40.403735Z","iopub.execute_input":"2025-02-25T14:12:40.404183Z","iopub.status.idle":"2025-02-25T14:12:40.567353Z","shell.execute_reply.started":"2025-02-25T14:12:40.404159Z","shell.execute_reply":"2025-02-25T14:12:40.566710Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"!git clone https://jackd0uet:$GITHUB_TOKEN@github.com/jackd0uet/automated-offside.git\n\nHOME = os.getcwd()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-25T14:12:40.567984Z","iopub.execute_input":"2025-02-25T14:12:40.568241Z","iopub.status.idle":"2025-02-25T14:13:02.516847Z","shell.execute_reply.started":"2025-02-25T14:12:40.568219Z","shell.execute_reply":"2025-02-25T14:13:02.515644Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"weights_directory = f\"{HOME}/automated-offside/yolo-checkpoints/version-12/2025-02-19_16-40-28\"\nzip_name = \"/weights.zip\"\narchive_format = \"zip\"\n\nos.chdir(weights_directory)\n\nshutil.unpack_archive(weights_directory + zip_name, weights_directory, archive_format)\nprint(\"Weights sucessfully unpacked!\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-25T14:13:02.517957Z","iopub.execute_input":"2025-02-25T14:13:02.518241Z","iopub.status.idle":"2025-02-25T14:13:03.214813Z","shell.execute_reply.started":"2025-02-25T14:13:02.518213Z","shell.execute_reply":"2025-02-25T14:13:03.214148Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"model = YOLO(f\"{weights_directory}/best.pt\")\n\nprint(model.names)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-25T14:13:03.217188Z","iopub.execute_input":"2025-02-25T14:13:03.217416Z","iopub.status.idle":"2025-02-25T14:13:03.401278Z","shell.execute_reply.started":"2025-02-25T14:13:03.217397Z","shell.execute_reply":"2025-02-25T14:13:03.400465Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"test_dir = f\"{HOME}/automated-offside/dataset/Labelled-football-scenes-12/test/images\"\nresults = model.predict(f\"{test_dir}/460_jpg.rf.ae2f47c7b975394cf103c21e2750d966.jpg\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-25T14:13:03.402305Z","iopub.execute_input":"2025-02-25T14:13:03.402634Z","iopub.status.idle":"2025-02-25T14:13:07.363747Z","shell.execute_reply.started":"2025-02-25T14:13:03.402601Z","shell.execute_reply":"2025-02-25T14:13:07.363092Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"for result in results:\n    boxes = result.boxes.cpu().numpy()\n    result.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-25T14:13:07.364584Z","iopub.execute_input":"2025-02-25T14:13:07.364839Z","iopub.status.idle":"2025-02-25T14:13:07.600880Z","shell.execute_reply.started":"2025-02-25T14:13:07.364806Z","shell.execute_reply":"2025-02-25T14:13:07.599750Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"player = 2\n\nplayer_boxes = []\n\nfor box in boxes:\n    if box.cls == player:\n        player_boxes.append(box.xyxy[0].tolist())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-25T14:13:07.601755Z","iopub.execute_input":"2025-02-25T14:13:07.601968Z","iopub.status.idle":"2025-02-25T14:13:07.605945Z","shell.execute_reply.started":"2025-02-25T14:13:07.601950Z","shell.execute_reply":"2025-02-25T14:13:07.605152Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"base_model = ResNet50(weights='imagenet', include_top=False, pooling='avg')\nmodel = Model(inputs=base_model.input, outputs=base_model.output)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-25T14:13:07.606623Z","iopub.execute_input":"2025-02-25T14:13:07.606846Z","iopub.status.idle":"2025-02-25T14:13:11.090871Z","shell.execute_reply.started":"2025-02-25T14:13:07.606826Z","shell.execute_reply":"2025-02-25T14:13:11.089956Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def extract_deep_features(image):\n    image = cv2.resize(image, (224, 224))\n    image = np.expand_dims(image, axis=0)\n    image = preprocess_input(image)\n    features = model.predict(image)\n\n    return features.flatten()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-25T14:13:11.091835Z","iopub.execute_input":"2025-02-25T14:13:11.092166Z","iopub.status.idle":"2025-02-25T14:13:11.096248Z","shell.execute_reply.started":"2025-02-25T14:13:11.092142Z","shell.execute_reply":"2025-02-25T14:13:11.095384Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"image = cv2.imread(f\"{test_dir}/460_jpg.rf.ae2f47c7b975394cf103c21e2750d966.jpg\")\n\nplayer_features = []\nplt.figure(figsize=(10,10))\n\nfor idx, player_box in enumerate(player_boxes):\n    x_min, y_min, x_max, y_max = map(int, player_box)\n    cropped_player = image[y_min:y_max, x_min:x_max]\n    cropped_player_rgb = cv2.cvtColor(cropped_player, cv2.COLOR_BGR2RGB)\n\n    deep_features = extract_deep_features(cropped_player_rgb)\n    \n    player_features.append(np.hstack([deep_features]))\n\n    plt.subplot(1, len(player_boxes), idx + 1)\n    plt.imshow(cropped_player_rgb)\n    plt.axis(\"off\")\n\nplt.show","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-25T14:13:11.097024Z","iopub.execute_input":"2025-02-25T14:13:11.097328Z","iopub.status.idle":"2025-02-25T14:13:17.446387Z","shell.execute_reply.started":"2025-02-25T14:13:11.097299Z","shell.execute_reply":"2025-02-25T14:13:17.445561Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"x = np.array(player_features, dtype=np.float32)\n\ncriteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.2)\nk = 2\n\nretval, labels, centres = cv2.kmeans(x, k, None, criteria, 10, cv2.KMEANS_RANDOM_CENTERS)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-25T14:13:17.447418Z","iopub.execute_input":"2025-02-25T14:13:17.447727Z","iopub.status.idle":"2025-02-25T14:13:17.456783Z","shell.execute_reply.started":"2025-02-25T14:13:17.447697Z","shell.execute_reply":"2025-02-25T14:13:17.456134Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"num_clusters = len(set(labels.flatten()))\ncolours = [[255,0,0], [0, 0, 255]]\n\nimage_with_boxes = image.copy()\n\nfor idx, (player_box, label) in enumerate(zip(player_boxes, labels.flatten())):\n    x_min, y_min, x_max, y_max = map(int, player_box)\n    colour = colours[label]\n    cv2.rectangle(image_with_boxes, (x_min, y_min), (x_max, y_max), colour, 2)\n\nplt.figure(figsize=(10,6))\nplt.imshow(cv2.cvtColor(image_with_boxes, cv2.COLOR_BGR2RGB))\nplt.title(\"Players categorised into teams\")\nplt.axis(\"off\")\nplt.show()\n    ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-25T14:13:17.457558Z","iopub.execute_input":"2025-02-25T14:13:17.457791Z","iopub.status.idle":"2025-02-25T14:13:17.829077Z","shell.execute_reply.started":"2025-02-25T14:13:17.457771Z","shell.execute_reply":"2025-02-25T14:13:17.828176Z"}},"outputs":[],"execution_count":null}]}