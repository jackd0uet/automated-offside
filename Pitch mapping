{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[],"dockerImageVersionId":30919,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"%pip install ultralytics roboflow\n!pip install -q git+https://github.com/roboflow/sports.git\n!pip install -q supervision>=0.23.0\n\nfrom ultralytics import YOLO\nimport os\nimport shutil\n\nfrom kaggle_secrets import UserSecretsClient\nfrom roboflow import Roboflow\n\n\nfrom sports.annotators.soccer import draw_pitch\nfrom sports.configs.soccer import SoccerPitchConfiguration\nfrom sports.common.view import ViewTransformer\n\nimport supervision as sv\n\nimport cv2\nimport numpy as np\n\nimport random\n\nimport matplotlib.pyplot as plt\n\nfrom scipy.spatial import KDTree","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-03-07T15:38:48.517484Z","iopub.execute_input":"2025-03-07T15:38:48.517706Z","iopub.status.idle":"2025-03-07T15:39:10.264152Z","shell.execute_reply.started":"2025-03-07T15:38:48.517685Z","shell.execute_reply":"2025-03-07T15:39:10.263204Z"}},"outputs":[{"name":"stdout","text":"Collecting ultralytics\n  Downloading ultralytics-8.3.85-py3-none-any.whl.metadata (35 kB)\nCollecting roboflow\n  Downloading roboflow-1.1.54-py3-none-any.whl.metadata (9.7 kB)\nRequirement already satisfied: numpy<=2.1.1,>=1.23.0 in /usr/local/lib/python3.10/dist-packages (from ultralytics) (1.26.4)\nRequirement already satisfied: matplotlib>=3.3.0 in /usr/local/lib/python3.10/dist-packages (from ultralytics) (3.7.5)\nRequirement already satisfied: opencv-python>=4.6.0 in /usr/local/lib/python3.10/dist-packages (from ultralytics) (4.10.0.84)\nRequirement already satisfied: pillow>=7.1.2 in /usr/local/lib/python3.10/dist-packages (from ultralytics) (11.0.0)\nRequirement already satisfied: pyyaml>=5.3.1 in /usr/local/lib/python3.10/dist-packages (from ultralytics) (6.0.2)\nRequirement already satisfied: requests>=2.23.0 in /usr/local/lib/python3.10/dist-packages (from ultralytics) (2.32.3)\nRequirement already satisfied: scipy>=1.4.1 in /usr/local/lib/python3.10/dist-packages (from ultralytics) (1.13.1)\nRequirement already satisfied: torch>=1.8.0 in /usr/local/lib/python3.10/dist-packages (from ultralytics) (2.5.1+cu121)\nRequirement already satisfied: torchvision>=0.9.0 in /usr/local/lib/python3.10/dist-packages (from ultralytics) (0.20.1+cu121)\nRequirement already satisfied: tqdm>=4.64.0 in /usr/local/lib/python3.10/dist-packages (from ultralytics) (4.67.1)\nRequirement already satisfied: psutil in /usr/local/lib/python3.10/dist-packages (from ultralytics) (5.9.5)\nRequirement already satisfied: py-cpuinfo in /usr/local/lib/python3.10/dist-packages (from ultralytics) (9.0.0)\nRequirement already satisfied: pandas>=1.1.4 in /usr/local/lib/python3.10/dist-packages (from ultralytics) (2.2.3)\nRequirement already satisfied: seaborn>=0.11.0 in /usr/local/lib/python3.10/dist-packages (from ultralytics) (0.12.2)\nCollecting ultralytics-thop>=2.0.0 (from ultralytics)\n  Downloading ultralytics_thop-2.0.14-py3-none-any.whl.metadata (9.4 kB)\nRequirement already satisfied: certifi in /usr/local/lib/python3.10/dist-packages (from roboflow) (2025.1.31)\nCollecting idna==3.7 (from roboflow)\n  Downloading idna-3.7-py3-none-any.whl.metadata (9.9 kB)\nRequirement already satisfied: cycler in /usr/local/lib/python3.10/dist-packages (from roboflow) (0.12.1)\nRequirement already satisfied: kiwisolver>=1.3.1 in /usr/local/lib/python3.10/dist-packages (from roboflow) (1.4.7)\nRequirement already satisfied: opencv-python-headless==4.10.0.84 in /usr/local/lib/python3.10/dist-packages (from roboflow) (4.10.0.84)\nRequirement already satisfied: python-dateutil in /usr/local/lib/python3.10/dist-packages (from roboflow) (2.9.0.post0)\nCollecting python-dotenv (from roboflow)\n  Downloading python_dotenv-1.0.1-py3-none-any.whl.metadata (23 kB)\nRequirement already satisfied: six in /usr/local/lib/python3.10/dist-packages (from roboflow) (1.17.0)\nRequirement already satisfied: urllib3>=1.26.6 in /usr/local/lib/python3.10/dist-packages (from roboflow) (2.3.0)\nRequirement already satisfied: requests-toolbelt in /usr/local/lib/python3.10/dist-packages (from roboflow) (1.0.0)\nCollecting filetype (from roboflow)\n  Downloading filetype-1.2.0-py2.py3-none-any.whl.metadata (6.5 kB)\nRequirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=3.3.0->ultralytics) (1.3.1)\nRequirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=3.3.0->ultralytics) (4.55.3)\nRequirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=3.3.0->ultralytics) (24.2)\nRequirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=3.3.0->ultralytics) (3.2.0)\nRequirement already satisfied: mkl_fft in /usr/local/lib/python3.10/dist-packages (from numpy<=2.1.1,>=1.23.0->ultralytics) (1.3.8)\nRequirement already satisfied: mkl_random in /usr/local/lib/python3.10/dist-packages (from numpy<=2.1.1,>=1.23.0->ultralytics) (1.2.4)\nRequirement already satisfied: mkl_umath in /usr/local/lib/python3.10/dist-packages (from numpy<=2.1.1,>=1.23.0->ultralytics) (0.1.1)\nRequirement already satisfied: mkl in /usr/local/lib/python3.10/dist-packages (from numpy<=2.1.1,>=1.23.0->ultralytics) (2025.0.1)\nRequirement already satisfied: tbb4py in /usr/local/lib/python3.10/dist-packages (from numpy<=2.1.1,>=1.23.0->ultralytics) (2022.0.0)\nRequirement already satisfied: mkl-service in /usr/local/lib/python3.10/dist-packages (from numpy<=2.1.1,>=1.23.0->ultralytics) (2.4.1)\nRequirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=1.1.4->ultralytics) (2025.1)\nRequirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.10/dist-packages (from pandas>=1.1.4->ultralytics) (2025.1)\nRequirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests>=2.23.0->ultralytics) (3.4.1)\nRequirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from torch>=1.8.0->ultralytics) (3.17.0)\nRequirement already satisfied: typing-extensions>=4.8.0 in /usr/local/lib/python3.10/dist-packages (from torch>=1.8.0->ultralytics) (4.12.2)\nRequirement already satisfied: networkx in /usr/local/lib/python3.10/dist-packages (from torch>=1.8.0->ultralytics) (3.4.2)\nRequirement already satisfied: jinja2 in /usr/local/lib/python3.10/dist-packages (from torch>=1.8.0->ultralytics) (3.1.4)\nRequirement already satisfied: fsspec in /usr/local/lib/python3.10/dist-packages (from torch>=1.8.0->ultralytics) (2024.12.0)\nRequirement already satisfied: sympy==1.13.1 in /usr/local/lib/python3.10/dist-packages (from torch>=1.8.0->ultralytics) (1.13.1)\nRequirement already satisfied: mpmath<1.4,>=1.1.0 in /usr/local/lib/python3.10/dist-packages (from sympy==1.13.1->torch>=1.8.0->ultralytics) (1.3.0)\nRequirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from jinja2->torch>=1.8.0->ultralytics) (3.0.2)\nRequirement already satisfied: intel-openmp>=2024 in /usr/local/lib/python3.10/dist-packages (from mkl->numpy<=2.1.1,>=1.23.0->ultralytics) (2024.2.0)\nRequirement already satisfied: tbb==2022.* in /usr/local/lib/python3.10/dist-packages (from mkl->numpy<=2.1.1,>=1.23.0->ultralytics) (2022.0.0)\nRequirement already satisfied: tcmlib==1.* in /usr/local/lib/python3.10/dist-packages (from tbb==2022.*->mkl->numpy<=2.1.1,>=1.23.0->ultralytics) (1.2.0)\nRequirement already satisfied: intel-cmplr-lib-rt in /usr/local/lib/python3.10/dist-packages (from mkl_umath->numpy<=2.1.1,>=1.23.0->ultralytics) (2024.2.0)\nRequirement already satisfied: intel-cmplr-lib-ur==2024.2.0 in /usr/local/lib/python3.10/dist-packages (from intel-openmp>=2024->mkl->numpy<=2.1.1,>=1.23.0->ultralytics) (2024.2.0)\nDownloading ultralytics-8.3.85-py3-none-any.whl (922 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m922.2/922.2 kB\u001b[0m \u001b[31m23.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m00:01\u001b[0m\n\u001b[?25hDownloading roboflow-1.1.54-py3-none-any.whl (83 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m83.1/83.1 kB\u001b[0m \u001b[31m5.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hDownloading idna-3.7-py3-none-any.whl (66 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m66.8/66.8 kB\u001b[0m \u001b[31m4.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hDownloading ultralytics_thop-2.0.14-py3-none-any.whl (26 kB)\nDownloading filetype-1.2.0-py2.py3-none-any.whl (19 kB)\nDownloading python_dotenv-1.0.1-py3-none-any.whl (19 kB)\nInstalling collected packages: filetype, python-dotenv, idna, ultralytics-thop, ultralytics, roboflow\n  Attempting uninstall: idna\n    Found existing installation: idna 3.10\n    Uninstalling idna-3.10:\n      Successfully uninstalled idna-3.10\n\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\ntensorflow-decision-forests 1.10.0 requires tensorflow==2.17.0, but you have tensorflow 2.17.1 which is incompatible.\u001b[0m\u001b[31m\n\u001b[0mSuccessfully installed filetype-1.2.0 idna-3.7 python-dotenv-1.0.1 roboflow-1.1.54 ultralytics-8.3.85 ultralytics-thop-2.0.14\nNote: you may need to restart the kernel to use updated packages.\n  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m181.5/181.5 kB\u001b[0m \u001b[31m6.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m88.8/88.8 kB\u001b[0m \u001b[31m6.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m56.9/56.9 kB\u001b[0m \u001b[31m3.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25h  Building wheel for sports (setup.py) ... \u001b[?25l\u001b[?25hdone\nCreating new Ultralytics Settings v0.0.6 file ✅ \nView Ultralytics Settings with 'yolo settings' or at '/root/.config/Ultralytics/settings.json'\nUpdate Settings with 'yolo settings key=value', i.e. 'yolo settings runs_dir=path/to/dir'. For help see https://docs.ultralytics.com/quickstart/#ultralytics-settings.\n","output_type":"stream"}],"execution_count":1},{"cell_type":"code","source":"user_secrets = UserSecretsClient()\nGITHUB_TOKEN = user_secrets.get_secret(\"GITHUB_TOKEN\")\n\nGITHUB_USERNAME = 'jackd0uet'\nGITHUB_REPO = 'automated-offside'","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-07T15:39:10.265068Z","iopub.execute_input":"2025-03-07T15:39:10.265475Z","iopub.status.idle":"2025-03-07T15:39:10.513765Z","shell.execute_reply.started":"2025-03-07T15:39:10.265452Z","shell.execute_reply":"2025-03-07T15:39:10.512857Z"}},"outputs":[],"execution_count":2},{"cell_type":"code","source":"!git clone https://jackd0uet:$GITHUB_TOKEN@github.com/jackd0uet/automated-offside.git\n\nHOME = os.getcwd()\nprint(HOME)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-07T15:39:10.515239Z","iopub.execute_input":"2025-03-07T15:39:10.515542Z","iopub.status.idle":"2025-03-07T15:39:53.571422Z","shell.execute_reply.started":"2025-03-07T15:39:10.515514Z","shell.execute_reply":"2025-03-07T15:39:53.570500Z"}},"outputs":[{"name":"stdout","text":"Cloning into 'automated-offside'...\nremote: Enumerating objects: 1134, done.\u001b[K\nremote: Counting objects: 100% (7/7), done.\u001b[K\nremote: Compressing objects: 100% (7/7), done.\u001b[K\nremote: Total 1134 (delta 2), reused 0 (delta 0), pack-reused 1127 (from 5)\u001b[K\nReceiving objects: 100% (1134/1134), 1.60 GiB | 56.06 MiB/s, done.\nResolving deltas: 100% (97/97), done.\nUpdating files: 100% (1562/1562), done.\n/kaggle/working\n","output_type":"stream"}],"execution_count":3},{"cell_type":"code","source":"weights_directory = f\"{HOME}/automated-offside/yolo-checkpoints/pitch-segmentation/2025-03-05_15-58-19\"\nzip_name = \"/weights.zip\"\narchive_format = \"zip\"\n\nos.chdir(weights_directory)\n\nshutil.unpack_archive(weights_directory + zip_name, weights_directory, archive_format)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-07T15:39:53.572833Z","iopub.execute_input":"2025-03-07T15:39:53.573073Z","iopub.status.idle":"2025-03-07T15:39:54.320511Z","shell.execute_reply.started":"2025-03-07T15:39:53.573052Z","shell.execute_reply":"2025-03-07T15:39:54.319799Z"}},"outputs":[],"execution_count":4},{"cell_type":"code","source":"model = YOLO(f\"{weights_directory}/best.pt\")\ntest_dir = f\"{HOME}/automated-offside/dataset/Labelled-football-scenes-21/test/images/218_jpg.rf.5b6f7df52540e43a57b11d68697be3f8.jpg\"","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-07T15:39:54.321305Z","iopub.execute_input":"2025-03-07T15:39:54.321505Z","iopub.status.idle":"2025-03-07T15:39:54.530190Z","shell.execute_reply.started":"2025-03-07T15:39:54.321487Z","shell.execute_reply":"2025-03-07T15:39:54.529269Z"}},"outputs":[],"execution_count":5},{"cell_type":"code","source":"results = model.predict(test_dir)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-07T15:39:54.530972Z","iopub.execute_input":"2025-03-07T15:39:54.531240Z","iopub.status.idle":"2025-03-07T15:39:58.965194Z","shell.execute_reply.started":"2025-03-07T15:39:54.531218Z","shell.execute_reply":"2025-03-07T15:39:58.964196Z"}},"outputs":[{"name":"stdout","text":"\nimage 1/1 /kaggle/working/automated-offside/dataset/Labelled-football-scenes-21/test/images/218_jpg.rf.5b6f7df52540e43a57b11d68697be3f8.jpg: 384x640 1 half, 1 penalty, 122.8ms\nSpeed: 10.2ms preprocess, 122.8ms inference, 460.2ms postprocess per image at shape (1, 3, 384, 640)\n","output_type":"stream"}],"execution_count":6},{"cell_type":"code","source":"yolo_classes = list(model.names.values())\nclas_ids = [yolo_classes.index(clas) for clas in yolo_classes]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-07T15:39:58.966167Z","iopub.execute_input":"2025-03-07T15:39:58.966495Z","iopub.status.idle":"2025-03-07T15:39:58.971585Z","shell.execute_reply.started":"2025-03-07T15:39:58.966459Z","shell.execute_reply":"2025-03-07T15:39:58.970662Z"}},"outputs":[],"execution_count":7},{"cell_type":"code","source":"config = SoccerPitchConfiguration()\n\nannotated_frame = draw_pitch(config)\n\nsv.plot_image(annotated_frame)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-07T15:40:01.568700Z","iopub.execute_input":"2025-03-07T15:40:01.568954Z","iopub.status.idle":"2025-03-07T15:40:05.354320Z","shell.execute_reply.started":"2025-03-07T15:40:01.568934Z","shell.execute_reply":"2025-03-07T15:40:05.353450Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x1200 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":9},{"cell_type":"code","source":"print(config)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-07T15:40:05.355276Z","iopub.execute_input":"2025-03-07T15:40:05.355590Z","iopub.status.idle":"2025-03-07T15:40:05.359822Z","shell.execute_reply.started":"2025-03-07T15:40:05.355551Z","shell.execute_reply":"2025-03-07T15:40:05.359146Z"}},"outputs":[{"name":"stdout","text":"SoccerPitchConfiguration(width=7000, length=12000, penalty_box_width=4100, penalty_box_length=2015, goal_box_width=1832, goal_box_length=550, centre_circle_radius=915, penalty_spot_distance=1100, edges=[(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (7, 8), (10, 11), (11, 12), (12, 13), (14, 15), (15, 16), (16, 17), (18, 19), (19, 20), (20, 21), (23, 24), (25, 26), (26, 27), (27, 28), (28, 29), (29, 30), (1, 14), (2, 10), (3, 7), (4, 8), (5, 13), (6, 17), (14, 25), (18, 26), (23, 27), (24, 28), (21, 29), (17, 30)], labels=['01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12', '13', '15', '16', '17', '18', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '14', '19'], colors=['#FF1493', '#FF1493', '#FF1493', '#FF1493', '#FF1493', '#FF1493', '#FF1493', '#FF1493', '#FF1493', '#FF1493', '#FF1493', '#FF1493', '#FF1493', '#00BFFF', '#00BFFF', '#00BFFF', '#00BFFF', '#FF6347', '#FF6347', '#FF6347', '#FF6347', '#FF6347', '#FF6347', '#FF6347', '#FF6347', '#FF6347', '#FF6347', '#FF6347', '#FF6347', '#FF6347', '#00BFFF', '#00BFFF'])\n","output_type":"stream"}],"execution_count":10},{"cell_type":"code","source":"for result in results:\n    masks = result.masks\n    labels = result.names","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-07T17:28:02.967904Z","iopub.execute_input":"2025-03-07T17:28:02.968249Z","iopub.status.idle":"2025-03-07T17:28:02.972081Z","shell.execute_reply.started":"2025-03-07T17:28:02.968221Z","shell.execute_reply":"2025-03-07T17:28:02.971228Z"}},"outputs":[],"execution_count":124},{"cell_type":"code","source":"penalty_box_mask = masks[1].data\npenalty_box_mask_cpu = penalty_box_mask.cpu().numpy()\npenalty_box_mask_cpu = (penalty_box_mask_cpu * 255).astype(np.uint8)\npenalty_box_mask_cpu = penalty_box_mask_cpu.squeeze()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-07T17:41:16.665165Z","iopub.execute_input":"2025-03-07T17:41:16.665470Z","iopub.status.idle":"2025-03-07T17:41:16.670404Z","shell.execute_reply.started":"2025-03-07T17:41:16.665447Z","shell.execute_reply":"2025-03-07T17:41:16.669507Z"}},"outputs":[],"execution_count":156},{"cell_type":"code","source":"# To do, update poits for both of these to be correct - src points should be from YOLO and dst from config\nsrc_points = np.array([\n    [1500, 1500],\n    [5500, 1500],\n    [1500, 3500],\n    [5500, 3500]\n], dtype=np.float32)\n\ndst_points = np.array([\n    [200, 200],\n    [5000, 200],\n    [200, 5000],\n    [5000, 5000]\n], dtype=np.float32)\n\nhomography_matrix, status = cv2.findHomography(src_points, dst_points)\nhomography_matrix = np.array(homography_matrix, dtype=np.float32)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-07T17:41:17.749655Z","iopub.execute_input":"2025-03-07T17:41:17.749980Z","iopub.status.idle":"2025-03-07T17:41:17.755017Z","shell.execute_reply.started":"2025-03-07T17:41:17.749951Z","shell.execute_reply":"2025-03-07T17:41:17.754313Z"}},"outputs":[],"execution_count":157},{"cell_type":"code","source":"transformed_penalty_box_mask = cv2.warpPerspective(penalty_box_mask_cpu, homography_matrix, (1920, 1080))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-07T17:41:23.324208Z","iopub.execute_input":"2025-03-07T17:41:23.324512Z","iopub.status.idle":"2025-03-07T17:41:23.347494Z","shell.execute_reply.started":"2025-03-07T17:41:23.324489Z","shell.execute_reply":"2025-03-07T17:41:23.346838Z"}},"outputs":[],"execution_count":159},{"cell_type":"code","source":"# Visualize the original and transformed penalty box mask\nfig, ax = plt.subplots(1, 2, figsize=(12, 6))\n\n# Plot the original penalty box mask\nax[0].imshow(penalty_box_mask_cpu, cmap='gray')\nax[0].set_title('Original Penalty Box Mask')\nax[0].axis('off')\n\n# Plot the transformed penalty box mask\nax[1].imshow(transformed_penalty_box_mask, cmap='gray')\nax[1].set_title('Transformed Penalty Box Mask')\nax[1].axis('off')\n\nplt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-07T17:42:25.004629Z","iopub.execute_input":"2025-03-07T17:42:25.004955Z","iopub.status.idle":"2025-03-07T17:42:25.273902Z","shell.execute_reply.started":"2025-03-07T17:42:25.004926Z","shell.execute_reply":"2025-03-07T17:42:25.273208Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x600 with 2 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":163},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}