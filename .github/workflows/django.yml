name: Django CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.4
        env:
          MYSQL_DATABASE: offside_db
          MYSQL_ROOT_PASSWORD: ${{ secrets.SQL_PASSWORD }}
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.9
      uses: actions/setup-python@v5
      with:
        python-version: 3.9

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov

    - name: Apply database migrations
      env:
          SQL_USER: root
          SQL_PASSWORD: ${{ secrets.SQL_PASSWORD }}
          MYSQL_HOST: 127.0.0.1
      run: |
        cd app
        python manage.py migrate
        cd ../

    - name: Run Frontend Tests
      env:
          SQL_USER: root
          SQL_PASSWORD: ${{ secrets.SQL_PASSWORD }}
          MYSQL_HOST: 127.0.0.1
          SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
          DEBUG: 1
      run: |
        cd app
        coverage run --rcfile ./config/.coveragerc --data-file=.coverage.frontend manage.py test frontend
        cd ../

    - name: Run API Tests
      env:
          SQL_USER: root
          SQL_PASSWORD: ${{ secrets.SQL_PASSWORD }}
          MYSQL_HOST: 127.0.0.1
          SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
          DEBUG: 1
      run: |
        cd app/algorithm_api
        coverage run --rcfile ./config/.coveragerc --data-file=.coverage.api pytest
        cd ../../

    - name: Generate and output coverage report
      run: |
        coverage combine .coverage.frontend .coverage.api
        coverage report -m
        coverage xml

    - name: Upload results to Codecov
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
